<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mzh&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://y-mzh.github.io/"/>
  <updated>2018-02-08T12:35:40.282Z</updated>
  <id>https://y-mzh.github.io/</id>
  
  <author>
    <name>Mzh&#39;s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中三种编译方式</title>
    <link href="https://y-mzh.github.io/Java/Java%E7%BC%96%E8%AF%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://y-mzh.github.io/Java/Java编译的三种方式/</id>
    <published>2018-02-08T12:29:16.976Z</published>
    <updated>2018-02-08T12:35:40.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三种编译方式"><a href="#三种编译方式" class="headerlink" title="三种编译方式"></a>三种编译方式</h3><hr><p>Java体系中分三种编译方式：前端编译、即时编译(JIT编译)、静态提前编译(AOT编译)。目前Java体系中主要还是采用前端编译+JIT编译的方式，如JDK中的HotSpot虚拟机；下面简单介绍下三种编译方式的优缺点：</p><h3 id="1-前端编译-Javac编译"><a href="#1-前端编译-Javac编译" class="headerlink" title="1.前端编译(Javac编译)"></a><strong>1.前端编译(Javac编译)</strong></h3><p>通过Javac把Java源码文件（.java）编译成Class文件(.class二进制字节码)的过程；<br>把满足Java语言规范的程序转化为满足JVM规范所要求格式的功能；</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>这阶段的代码优化是指程序编码方面的。</li><li>许多Java语法新特性（语法糖、泛型、内部类等等），是靠前端编译器实现的,而不是依赖虚拟机。</li><li>编译成的Class文件可以直接给JVM解释器解释执行，省去编译时间，加快启动速度。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>对代码运行效率几乎没有任何优化措施。</li><li>解释执行效率较低。</li></ul><h5 id="前端编译器有：Oracle-javac、Eclipse-JDT中的增量式编译器（ECJ）等。"><a href="#前端编译器有：Oracle-javac、Eclipse-JDT中的增量式编译器（ECJ）等。" class="headerlink" title="前端编译器有：Oracle javac、Eclipse JDT中的增量式编译器（ECJ）等。"></a><strong>前端编译器有：Oracle javac、Eclipse JDT中的增量式编译器（ECJ）等。</strong></h5><hr><h3 id="2-即时编译-JIT编译-后端编译"><a href="#2-即时编译-JIT编译-后端编译" class="headerlink" title="2.即时编译(JIT编译/后端编译)"></a><strong>2.即时编译(JIT编译/后端编译)</strong></h3><p> 通过Java虚拟机（JVM）内置的即时编译器（Just In Time Compiler，JIT编译器）；在运行时把Class文件字节码编译成机器码的过程。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>通过在运行时收集监控信息，把代码编译成与本地平台相关的机器码，并进行各种层次的优化。</li><li>可以提高执行效率。</li><li>可以对这个阶段进行JVM调优。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>编译过程占用程序运行时间。</li><li>编译机器码占用内存。</li></ul><h5 id="JIT编译器有：HotSpot虚拟机的C1、C2编译器等。"><a href="#JIT编译器有：HotSpot虚拟机的C1、C2编译器等。" class="headerlink" title="JIT编译器有：HotSpot虚拟机的C1、C2编译器等。"></a><strong>JIT编译器有：HotSpot虚拟机的C1、C2编译器等。</strong></h5><hr><h3 id="3-静态提前编译（AOT编译）"><a href="#3-静态提前编译（AOT编译）" class="headerlink" title="3.静态提前编译（AOT编译）"></a><strong>3.静态提前编译（AOT编译）</strong></h3><p>程序运行前，直接把Java源码文件（.java）编译成机器码的过程。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>编译不占用运行时间，可以做一些较耗时的优化，并可加快程序启动。</li><li>把编译的机器码保存到磁盘，不占用内存，并可多次使用。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>Java语言的动态性（如反射）带来了额外的复杂性，影响了静态编译代码的质量。</li><li>静态编译不如JIT编译的质量，这种方式用得比较少。</li></ul><h5 id="静态提前编译器有：JAOTC、GCJ、Excelsior-JET、ART-Android-Runtime-等。"><a href="#静态提前编译器有：JAOTC、GCJ、Excelsior-JET、ART-Android-Runtime-等。" class="headerlink" title="静态提前编译器有：JAOTC、GCJ、Excelsior JET、ART (Android Runtime)等。"></a><strong>静态提前编译器有：JAOTC、GCJ、Excelsior JET、ART (Android Runtime)等。</strong></h5><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;三种编译方式&quot;&gt;&lt;a href=&quot;#三种编译方式&quot; class=&quot;headerlink&quot; title=&quot;三种编译方式&quot;&gt;&lt;/a&gt;三种编译方式&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Java体系中分三种编译方式：前端编译、即时编译(JIT编译)、静态提前编译(AOT编译)。目前J
      
    
    </summary>
    
      <category term="Java" scheme="https://y-mzh.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo+GithubPage搭建个人博客（Windows）</title>
    <link href="https://y-mzh.github.io/Git/hexo-Git/"/>
    <id>https://y-mzh.github.io/Git/hexo-Git/</id>
    <published>2018-02-07T13:18:34.810Z</published>
    <updated>2018-02-07T16:07:36.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><h5 id="安装node-Js"><a href="#安装node-Js" class="headerlink" title="安装node.Js"></a>安装node.Js</h5><p>去 NodeJs 官网下载相应版本，进行安装即可。可以通过node -v的命令来测试NodeJS是否安装成功。</p></li><li><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>去 Git 官网下载相应版本，进行安装即可。 可以通过git –version的命令来测试git是否安装成功。</p></li><li><h5 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h5><p>去 Github 官网进行注册。 注册完之后记得添加 SSH Key。<br>这个 SSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure><p>~这个符号，表示在用户目录下，如果提示：No such file or directory 说明是第一次使用                   git。<br>生产新的SSH Key配置，在Git Bash执行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;此处写邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>成功后会生成两个文件id_rsa 以及id_rsa.pub。然后添加在github上</p></li><li><h5 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h5><p>1.<strong>安装Hexo:</strong><br>  在本地新建一个Hexo文件夹，文件右键，选择Git Bash。<br>  输入指令安装hexo：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>  等安装完毕，通过输入hexo的命令来测试Hexo是否安装成功,成功如下图展示:<br>  <img src="../GitImg/githexo.jpg" alt="" title="安装Hexo"><br>2.<strong>初始化Hexo：</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure><p>  初始化成功会显示Start blogging with Hexo!<br>  这时在你刚才创建的Hexo里面会多出一个hexo文件 。<br>  进入到hexo目录，右键，选择Git Bash，输入下面指令安装依赖：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p> 部署形成文件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p> 运行hexo服务</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p> 打开浏览器，输入<a href="http://localhost:4000/便可看到默认的博客。" target="_blank" rel="noopener">http://localhost:4000/便可看到默认的博客。</a></p><p>3.<strong>配置githubPage</strong><br>  登录Github，点击”New repository”，新建一个版本库。<br>  输入仓库名：你的Github名称.github.io。然后点击Create repository。<br>  <strong>注意：这边的创建名字，一定要用的github的用户名，不然显示不出来，因为githubPage只能你的用户名。</strong></p><p>4.<strong>启用GitHub Page</strong><br>  进入项目，点击Settings，如下图：<br>  <img src="../../img/git-setting.jpg" alt="" title="设置"><br>  进入设置界面，下拉找到Choose a theme，如下图：<br>  <img src="../../img/chooseTheme.jpg" alt="" title="设置"><br>  选择一个随意模版，点击”Select theme”,发布github默认生成的一个静态站点。<br>  试着打开自己在github的静态网址，<a href="https://y-mzh.github.io/。">https://y-mzh.github.io/。</a></p><p>5.<strong>将本地hexo项目托管到Github</strong><br>  打开修改hexo目录下配置文件_config.yml。<br>  <img src="../../img/config.jpg" alt="" title="设置"><br>  编辑最后面的deploy属性，加入代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    type: git</span><br><span class="line">repository: git@github.com:Y-mzh/Y-mzh.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>  type使用是git。<br>  repository属性改成你的刚才创建仓库git地址。<br>  分支branch填写master。<br>6.<strong>网站的配置文件，这里列举部分关键配置：</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title:  Blog //网站的标题</span><br><span class="line">subtitle: life is struggle //副标题</span><br><span class="line">description: life is struggle //描述</span><br><span class="line">author: examble #作者信息</span><br><span class="line">avatar: /images/avatar.png //头像，图片位置在相应主题目录下的images</span><br><span class="line">language: zh-Hans //中文简体</span><br><span class="line">email: </span><br><span class="line">timezone:</span><br><span class="line"># Extensions</span><br><span class="line">theme: next //配置主题，这里使用next主题</span><br><span class="line">stylus:</span><br><span class="line">compress: true //自适应布局</span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Y-mzh/Y-mzh.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>7.<strong>安装hexo-deployer-git插件</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>8.<strong>上传本地的主题到github上</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generator //简写 hexo g</span><br><span class="line">hexo deploy //简写 hexo d</span><br></pre></td></tr></table></figure><p>  最后看下，部署到github上的效果！<br>  访问：<a href="https://y-mzh.github.io/">https://y-mzh.github.io/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;安装node-Js&quot;&gt;&lt;a href=&quot;#安装node-Js&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Git" scheme="https://y-mzh.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://y-mzh.github.io/hello-world/"/>
    <id>https://y-mzh.github.io/hello-world/</id>
    <published>2018-02-05T13:43:52.370Z</published>
    <updated>2018-02-05T13:43:52.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
