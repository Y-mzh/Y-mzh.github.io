<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mzh&#39;s</title>
  
  <subtitle>Java技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baiks.cn/"/>
  <updated>2018-02-15T07:17:50.873Z</updated>
  <id>http://baiks.cn/</id>
  
  <author>
    <name>Mzh&#39;s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git常用命令总结</title>
    <link href="http://baiks.cn/Git/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html"/>
    <id>http://baiks.cn/Git/Git常用命令总结.html</id>
    <published>2018-02-15T06:16:29.228Z</published>
    <updated>2018-02-15T07:17:50.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git命令总结"><a href="#Git命令总结" class="headerlink" title="Git命令总结"></a>Git命令总结</h3><ol><li><h5 id="一般来说，日常使用只要记住下图6个命令，就可以了。"><a href="#一般来说，日常使用只要记住下图6个命令，就可以了。" class="headerlink" title="一般来说，日常使用只要记住下图6个命令，就可以了。"></a>一般来说，日常使用只要记住下图6个命令，就可以了。</h5><p>   <img src="../../img/gitlist.png" alt="" title="Git图"></p></li><li><h5 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h5><blockquote><p>#在当前目录新建一个Git代码库<br>$ git init</p><p>#新建一个目录，将其初始化为Git代码库<br>$ git init [project-name]</p><p>#从远程仓库下载一个项目<br>$ git clone [url]</p></blockquote></li><li><h5 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h5><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><blockquote><p>#显示当前的Git配置<br>$ git config –list</p><p>#编辑Git配置文件<br>$ git config -e [–global]</p><p>#设置提交代码时的用户信息<br>$ git config [–global] user.name “[name]”<br>$ git config [–global] user.email “[email address]”</p></blockquote></li><li><h5 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h5><blockquote><p>#添加指定文件到暂存区<br>$ git add [file1] [file2] …</p><p>#添加指定目录到暂存区，包括子目录<br>$ git add [dir]</p><p>#添加当前目录的所有文件到暂存区<br>$ git add .</p><p>#添加每个变化前，都会要求确认<br>#对于同一个文件的多处变化，可以实现分次提交<br>$ git add -p</p><p>#删除工作区文件，并且将这次删除放入暂存区<br>$ git rm [file1] [file2] …</p><p>#停止追踪指定文件，但该文件会保留在工作区<br>$ git rm –cached [file]</p><p>#改名文件，并且将这个改名放入暂存区<br>$ git mv [file-original] [file-renamed]</p></blockquote></li><li><h5 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h5><blockquote><p>#提交暂存区到仓库区<br>$ git commit -m [message]</p><p>#提交暂存区的指定文件到仓库区<br>$ git commit [file1] [file2] … -m [message]</p><p>#提交工作区自上次commit之后的变化，直接到仓库区<br>$ git commit -a</p><p>#提交时显示所有diff信息<br>$ git commit -v</p><p>#使用一次新的commit，替代上一次提交<br>#如果代码没有任何新变化，则用来改写上一次commit的提交信息<br>$ git commit –amend -m [message]</p><p>#重做上一次commit，并包括指定文件的新变化<br>$ git commit –amend [file1] [file2] …</p></blockquote></li><li><h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5><blockquote><p>#列出所有本地分支<br>$ git branch</p><p>#列出所有远程分支<br>$ git branch -r</p><p>#列出所有本地分支和远程分支<br>$ git branch -a</p><p>#新建一个分支，但依然停留在当前分支<br>$ git branch [branch-name]</p><p>#新建一个分支，并切换到该分支<br>$ git checkout -b [branch]</p><p>#新建一个分支，指向指定commit<br>$ git branch [branch] [commit]</p><p>#新建一个分支，与指定的远程分支建立追踪关系<br>$ git branch –track [branch] [remote-branch]</p><p>#切换到指定分支，并更新工作区<br>$ git checkout [branch-name]</p><p>#切换到上一个分支<br>$ git checkout -</p><p>#建立追踪关系，在现有分支与指定的远程分支之间<br>$ git branch –set-upstream [branch] [remote-branch]</p><p>#合并指定分支到当前分支<br>$ git merge [branch]</p><p>#选择一个commit，合并进当前分支<br>$ git cherry-pick [commit]</p><p>#删除分支<br>$ git branch -d [branch-name]</p><p>#删除远程分支<br>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote/branch]</p></blockquote></li><li><h5 id="查看信息-日志"><a href="#查看信息-日志" class="headerlink" title="查看信息/日志"></a>查看信息/日志</h5><blockquote><p>#显示有变更的文件<br>$ git status</p><p>#显示当前分支的版本历史<br>$ git log</p><p>#显示commit历史，以及每次commit发生变更的文件<br>$ git log –stat</p><p>#搜索提交历史，根据关键词<br>$ git log -S [keyword]</p><p>#显示某个commit之后的所有变动，每个commit占据一行<br>$ git log [tag] HEAD –pretty=format:%s</p><p>#显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件<br>$ git log [tag] HEAD –grep feature</p><p>#显示某个文件的版本历史，包括文件改名<br>$ git log –follow [file]<br>$ git whatchanged [file]</p><p>#显示指定文件相关的每一次diff<br>$ git log -p [file]</p><p>#显示过去5次提交<br>$ git log -5 –pretty –oneline</p><p>#显示所有提交过的用户，按提交次数排序<br>$ git shortlog -sn</p><p>#显示指定文件是什么人在什么时间修改过<br>$ git blame [file]</p><p>#显示暂存区和工作区的差异<br>$ git diff</p><p>#显示暂存区和上一个commit的差异<br>$ git diff –cached [file]</p><p>#显示工作区与当前分支最新commit之间的差异<br>$ git diff HEAD</p><p>#显示两次提交之间的差异<br>$ git diff [first-branch]…[second-branch]</p><p>#显示今天你写了多少行代码<br>$ git diff –shortstat “@{0 day ago}”</p><p>#显示某次提交的元数据和内容变化<br>$ git show [commit]</p><p>#显示某次提交发生变化的文件<br>$ git show –name-only [commit]</p><p>#显示某次提交时，某个文件的内容<br>$ git show [commit]:[filename]</p><p>#显示当前分支的最近几次提交<br>$ git reflog</p></blockquote></li><li><h5 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h5><blockquote><p>#下载远程仓库的所有变动<br>$ git fetch [remote]</p><p>#显示所有远程仓库<br>$ git remote -v</p><p>#显示某个远程仓库的信息<br>$ git remote show [remote]</p><p>#增加一个新的远程仓库，并命名<br>$ git remote add [shortname] [url]</p><p>#取回远程仓库的变化，并与本地分支合并<br>$ git pull [remote] [branch]</p><p>#上传本地指定分支到远程仓库<br>$ git push [remote] [branch]</p><p>#强行推送当前分支到远程仓库，即使有冲突<br>$ git push [remote] –force</p><p>#推送所有分支到远程仓库<br>$ git push [remote] –all</p></blockquote></li><li><h5 id="撤销-回退"><a href="#撤销-回退" class="headerlink" title="撤销/回退"></a>撤销/回退</h5><blockquote><p>#恢复暂存区的指定文件到工作区<br>$ git checkout [file]</p><p>#恢复某个commit的指定文件到暂存区和工作区<br>$ git checkout [commit] [file]</p><p>#恢复暂存区的所有文件到工作区<br>$ git checkout .</p><p>#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>$ git reset [file]</p><p>#重置暂存区与工作区，与上一次commit保持一致<br>$ git reset –hard</p><p>#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>$ git reset [commit]</p><p>#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>$ git reset –hard [commit]</p><p>#重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>$ git reset –keep [commit]</p><p>#新建一个commit，用来撤销指定commit<br>#后者的所有变化都将被前者抵消，并且应用到当前分支<br>$ git revert [commit]</p><p>#暂时将未提交的变化移除，稍后再移入<br>$ git stash<br>$ git stash pop</p></blockquote></li><li><h5 id="标签相关操作"><a href="#标签相关操作" class="headerlink" title="标签相关操作"></a>标签相关操作</h5><blockquote><p>#列出所有tag<br>$ git tag</p><p>#新建一个tag在当前commit<br>$ git tag [tag]</p><p>#新建一个tag在指定commit<br>$ git tag [tag] [commit]</p><p>#删除本地tag<br>$ git tag -d [tag]</p><p>#删除远程tag<br>$ git push origin :refs/tags/[tagName]</p><p>#查看tag信息<br>$ git show [tag]</p><p>#提交指定tag<br>$ git push [remote] [tag]</p><p>#提交所有tag<br>$ git push [remote] –tags</p><p>#新建一个分支，指向某个tag<br>$ git checkout -b [branch] [tag]</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Git命令总结&quot;&gt;&lt;a href=&quot;#Git命令总结&quot; class=&quot;headerlink&quot; title=&quot;Git命令总结&quot;&gt;&lt;/a&gt;Git命令总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;一般来说，日常使用只要记住下图6个命令，就可以了。&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Git" scheme="http://baiks.cn/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Material 主题文档</title>
    <link href="http://baiks.cn/Theme/Material%20Theme%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.html"/>
    <id>http://baiks.cn/Theme/Material Theme使用文档.html</id>
    <published>2018-02-08T16:41:48.857Z</published>
    <updated>2018-02-08T16:54:55.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明文档："><a href="#说明文档：" class="headerlink" title="说明文档："></a>说明文档：</h3><h6 id="请访问-https-material-viosey-com-docs"><a href="#请访问-https-material-viosey-com-docs" class="headerlink" title="请访问 : https://material.viosey.com/docs/#/"></a>请访问 : <a href="https://material.viosey.com/docs/#/" target="_blank" rel="noopener">https://material.viosey.com/docs/#/</a></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;说明文档：&quot;&gt;&lt;a href=&quot;#说明文档：&quot; class=&quot;headerlink&quot; title=&quot;说明文档：&quot;&gt;&lt;/a&gt;说明文档：&lt;/h3&gt;&lt;h6 id=&quot;请访问-https-material-viosey-com-docs&quot;&gt;&lt;a href=&quot;#请访问-htt
      
    
    </summary>
    
      <category term="Theme" scheme="http://baiks.cn/categories/Theme/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中三种编译方式</title>
    <link href="http://baiks.cn/Java/Java%E7%BC%96%E8%AF%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F.html"/>
    <id>http://baiks.cn/Java/Java编译的三种方式.html</id>
    <published>2018-02-08T12:29:16.976Z</published>
    <updated>2018-02-08T16:14:31.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三种编译方式"><a href="#三种编译方式" class="headerlink" title="三种编译方式"></a>三种编译方式</h3><hr><p>Java体系中分三种编译方式：前端编译、即时编译(JIT编译)、静态提前编译(AOT编译)。目前Java体系中主要还是采用前端编译+JIT编译的方式，如JDK中的HotSpot虚拟机；下面简单介绍下三种编译方式的优缺点：</p><h3 id="1-前端编译-Javac编译"><a href="#1-前端编译-Javac编译" class="headerlink" title="1.前端编译(Javac编译)"></a><strong>1.前端编译(Javac编译)</strong></h3><p>通过Javac把Java源码文件（.java）编译成Class文件(.class二进制字节码)的过程；<br>把满足Java语言规范的程序转化为满足JVM规范所要求格式的功能；</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>这阶段的代码优化是指程序编码方面的。</li><li>许多Java语法新特性（语法糖、泛型、内部类等等），是靠前端编译器实现的,而不是依赖虚拟机。</li><li>编译成的Class文件可以直接给JVM解释器解释执行，省去编译时间，加快启动速度。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>对代码运行效率几乎没有任何优化措施。</li><li>解释执行效率较低。</li></ul><h5 id="前端编译器有：Oracle-javac、Eclipse-JDT中的增量式编译器（ECJ）等。"><a href="#前端编译器有：Oracle-javac、Eclipse-JDT中的增量式编译器（ECJ）等。" class="headerlink" title="前端编译器有：Oracle javac、Eclipse JDT中的增量式编译器（ECJ）等。"></a><strong>前端编译器有：Oracle javac、Eclipse JDT中的增量式编译器（ECJ）等。</strong></h5><hr><h3 id="2-即时编译-JIT编译-后端编译"><a href="#2-即时编译-JIT编译-后端编译" class="headerlink" title="2.即时编译(JIT编译/后端编译)"></a><strong>2.即时编译(JIT编译/后端编译)</strong></h3><p> 通过Java虚拟机（JVM）内置的即时编译器（Just In Time Compiler，JIT编译器）；在运行时把Class文件字节码编译成机器码的过程。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>通过在运行时收集监控信息，把代码编译成与本地平台相关的机器码，并进行各种层次的优化。</li><li>可以提高执行效率。</li><li>可以对这个阶段进行JVM调优。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>编译过程占用程序运行时间。</li><li>编译机器码占用内存。</li></ul><h5 id="JIT编译器有：HotSpot虚拟机的C1、C2编译器等。"><a href="#JIT编译器有：HotSpot虚拟机的C1、C2编译器等。" class="headerlink" title="JIT编译器有：HotSpot虚拟机的C1、C2编译器等。"></a><strong>JIT编译器有：HotSpot虚拟机的C1、C2编译器等。</strong></h5><hr><h3 id="3-静态提前编译（AOT编译）"><a href="#3-静态提前编译（AOT编译）" class="headerlink" title="3.静态提前编译（AOT编译）"></a><strong>3.静态提前编译（AOT编译）</strong></h3><p>程序运行前，直接把Java源码文件（.java）编译成机器码的过程。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>编译不占用运行时间，可以做一些较耗时的优化，并可加快程序启动。</li><li>把编译的机器码保存到磁盘，不占用内存，并可多次使用。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul><li>Java语言的动态性（如反射）带来了额外的复杂性，影响了静态编译代码的质量。</li><li>静态编译不如JIT编译的质量，这种方式用得比较少。</li></ul><h5 id="静态提前编译器有：JAOTC、GCJ、Excelsior-JET、ART-Android-Runtime-等。"><a href="#静态提前编译器有：JAOTC、GCJ、Excelsior-JET、ART-Android-Runtime-等。" class="headerlink" title="静态提前编译器有：JAOTC、GCJ、Excelsior JET、ART (Android Runtime)等。"></a><strong>静态提前编译器有：JAOTC、GCJ、Excelsior JET、ART (Android Runtime)等。</strong></h5><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;三种编译方式&quot;&gt;&lt;a href=&quot;#三种编译方式&quot; class=&quot;headerlink&quot; title=&quot;三种编译方式&quot;&gt;&lt;/a&gt;三种编译方式&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Java体系中分三种编译方式：前端编译、即时编译(JIT编译)、静态提前编译(AOT编译)。目前J
      
    
    </summary>
    
      <category term="Java" scheme="http://baiks.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo+GithubPage搭建个人博客（Windows）</title>
    <link href="http://baiks.cn/Git/hexo-Git.html"/>
    <id>http://baiks.cn/Git/hexo-Git.html</id>
    <published>2018-02-07T13:18:34.810Z</published>
    <updated>2018-02-15T06:23:52.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><h5 id="安装node-Js"><a href="#安装node-Js" class="headerlink" title="安装node.Js"></a>安装node.Js</h5><p>去 NodeJs 官网下载相应版本，进行安装即可。可以通过node -v的命令来测试NodeJS是否安装成功。</p></li><li><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>去 Git 官网下载相应版本，进行安装即可。 可以通过git –version的命令来测试git是否安装成功。</p></li><li><h5 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h5><p>去 Github 官网进行注册。 注册完之后记得添加 SSH Key。<br>这个 SSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure><p>~这个符号，表示在用户目录下，如果提示：No such file or directory 说明是第一次使用                   git。<br>生产新的SSH Key配置，在Git Bash执行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;此处写邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>成功后会生成两个文件id_rsa 以及id_rsa.pub。然后添加在github上</p></li><li><h5 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h5><p>1.<strong>安装Hexo:</strong><br>  在本地新建一个Hexo文件夹，文件右键，选择Git Bash。<br>  输入指令安装hexo：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>  等安装完毕，通过输入hexo的命令来测试Hexo是否安装成功,成功如下图展示:<br>  <img src="../../img/githexo.jpg" alt="" title="安装Hexo"><br>2.<strong>初始化Hexo：</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure><p>  初始化成功会显示Start blogging with Hexo!<br>  这时在你刚才创建的Hexo里面会多出一个hexo文件 。<br>  进入到hexo目录，右键，选择Git Bash，输入下面指令安装依赖：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p> 部署形成文件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p> 运行hexo服务</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p> 打开浏览器，输入<a href="http://localhost:4000/便可看到默认的博客。" target="_blank" rel="noopener">http://localhost:4000/便可看到默认的博客。</a></p><p>3.<strong>配置githubPage</strong><br>  登录Github，点击”New repository”，新建一个版本库。<br>  输入仓库名：你的Github名称.github.io。然后点击Create repository。<br>  <strong>注意：这边的创建名字，一定要用的github的用户名，不然显示不出来，因为githubPage只能你的用户名。</strong></p><p>4.<strong>启用GitHub Page</strong><br>  进入项目，点击Settings，如下图：<br>  <img src="../../img/git-setting.jpg" alt="" title="设置"><br>  进入设置界面，下拉找到Choose a theme，如下图：<br>  <img src="../../img/chooseTheme.jpg" alt="" title="设置"><br>  选择一个随意模版，点击”Select theme”,发布github默认生成的一个静态站点。<br>  试着打开自己在github的静态网址，<a href="https://y-mzh.github.io/。" target="_blank" rel="noopener">https://y-mzh.github.io/。</a></p><p>5.<strong>将本地hexo项目托管到Github</strong><br>  打开修改hexo目录下配置文件_config.yml。<br>  <img src="../../img/config.jpg" alt="" title="设置"><br>  编辑最后面的deploy属性，加入代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    type: git</span><br><span class="line">repository: git@github.com:Y-mzh/Y-mzh.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>  type使用是git。<br>  repository属性改成你的刚才创建仓库git地址。<br>  分支branch填写master。<br>6.<strong>网站的配置文件，这里列举部分关键配置：</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title:  Blog //网站的标题</span><br><span class="line">subtitle: life is struggle //副标题</span><br><span class="line">description: life is struggle //描述</span><br><span class="line">author: examble #作者信息</span><br><span class="line">avatar: /images/avatar.png //头像，图片位置在相应主题目录下的images</span><br><span class="line">language: zh-Hans //中文简体</span><br><span class="line">email: </span><br><span class="line">timezone:</span><br><span class="line"># Extensions</span><br><span class="line">theme: next //配置主题，这里使用next主题</span><br><span class="line">stylus:</span><br><span class="line">compress: true //自适应布局</span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Y-mzh/Y-mzh.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>7.<strong>安装hexo-deployer-git插件</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>8.<strong>上传本地的主题到github上</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generator //简写 hexo g</span><br><span class="line">hexo deploy //简写 hexo d</span><br></pre></td></tr></table></figure><p>  最后看下，部署到github上的效果！<br>  访问：<a href="https://y-mzh.github.io/" target="_blank" rel="noopener">https://y-mzh.github.io/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;安装node-Js&quot;&gt;&lt;a href=&quot;#安装node-Js&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Git" scheme="http://baiks.cn/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://baiks.cn/hello-world.html"/>
    <id>http://baiks.cn/hello-world.html</id>
    <published>2018-02-05T13:43:52.370Z</published>
    <updated>2018-02-05T13:43:52.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
