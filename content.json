{"meta":{"title":"Mzh's","subtitle":"Java技术博客","description":"Java技术","author":"Mzh's","url":"https://y-mzh.github.io"},"pages":[{"title":"About Me","date":"2018-02-08T13:09:22.244Z","updated":"2018-02-08T13:09:22.244Z","comments":true,"path":"about/index.html","permalink":"https://y-mzh.github.io/about/index.html","excerpt":"","text":"博观而约取,厚积而薄发。 网址：https://y-mzh.github.io联系人：Mzh’s邮件：185480677@qq.comQQ： 185480677"},{"title":"categories","date":"2018-02-05T15:06:06.000Z","updated":"2018-02-05T15:06:21.048Z","comments":false,"path":"categories/index.html","permalink":"https://y-mzh.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-02-05T15:05:17.000Z","updated":"2018-02-05T15:05:52.888Z","comments":false,"path":"tags/index.html","permalink":"https://y-mzh.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java中三种编译方式","slug":"Java/Java编译的三种方式","date":"2018-02-08T12:29:16.976Z","updated":"2018-02-08T16:14:31.235Z","comments":true,"path":"Java/Java编译的三种方式/","link":"","permalink":"https://y-mzh.github.io/Java/Java编译的三种方式/","excerpt":"","text":"三种编译方式 Java体系中分三种编译方式：前端编译、即时编译(JIT编译)、静态提前编译(AOT编译)。目前Java体系中主要还是采用前端编译+JIT编译的方式，如JDK中的HotSpot虚拟机；下面简单介绍下三种编译方式的优缺点： 1.前端编译(Javac编译)通过Javac把Java源码文件（.java）编译成Class文件(.class二进制字节码)的过程；把满足Java语言规范的程序转化为满足JVM规范所要求格式的功能； 优点 这阶段的代码优化是指程序编码方面的。 许多Java语法新特性（语法糖、泛型、内部类等等），是靠前端编译器实现的,而不是依赖虚拟机。 编译成的Class文件可以直接给JVM解释器解释执行，省去编译时间，加快启动速度。 缺点 对代码运行效率几乎没有任何优化措施。 解释执行效率较低。 前端编译器有：Oracle javac、Eclipse JDT中的增量式编译器（ECJ）等。 2.即时编译(JIT编译/后端编译) 通过Java虚拟机（JVM）内置的即时编译器（Just In Time Compiler，JIT编译器）；在运行时把Class文件字节码编译成机器码的过程。 优点 通过在运行时收集监控信息，把代码编译成与本地平台相关的机器码，并进行各种层次的优化。 可以提高执行效率。 可以对这个阶段进行JVM调优。 缺点 编译过程占用程序运行时间。 编译机器码占用内存。 JIT编译器有：HotSpot虚拟机的C1、C2编译器等。 3.静态提前编译（AOT编译）程序运行前，直接把Java源码文件（.java）编译成机器码的过程。 优点 编译不占用运行时间，可以做一些较耗时的优化，并可加快程序启动。 把编译的机器码保存到磁盘，不占用内存，并可多次使用。 缺点 Java语言的动态性（如反射）带来了额外的复杂性，影响了静态编译代码的质量。 静态编译不如JIT编译的质量，这种方式用得比较少。 静态提前编译器有：JAOTC、GCJ、Excelsior JET、ART (Android Runtime)等。","categories":[{"name":"Java","slug":"Java","permalink":"https://y-mzh.github.io/categories/Java/"}],"tags":[],"keywords":[{"name":"Java","slug":"Java","permalink":"https://y-mzh.github.io/categories/Java/"}]},{"title":"Hexo+GithubPage搭建个人博客（Windows）","slug":"Git/hexo-Git","date":"2018-02-07T13:18:34.810Z","updated":"2018-02-08T15:08:40.400Z","comments":true,"path":"Git/hexo-Git/","link":"","permalink":"https://y-mzh.github.io/Git/hexo-Git/","excerpt":"","text":"准备工作 安装node.Js去 NodeJs 官网下载相应版本，进行安装即可。可以通过node -v的命令来测试NodeJS是否安装成功。 安装Git去 Git 官网下载相应版本，进行安装即可。 可以通过git –version的命令来测试git是否安装成功。 注册Github账号去 Github 官网进行注册。 注册完之后记得添加 SSH Key。这个 SSH Key是一个认证，让github识别绑定这台机器，允许这台机器提交。执行如下命令： 1cd ~/. ssh ~这个符号，表示在用户目录下，如果提示：No such file or directory 说明是第一次使用 git。生产新的SSH Key配置，在Git Bash执行代码： 1ssh-keygen -t rsa -C &quot;此处写邮箱地址&quot; 成功后会生成两个文件id_rsa 以及id_rsa.pub。然后添加在github上 搭建博客1.安装Hexo: 在本地新建一个Hexo文件夹，文件右键，选择Git Bash。 输入指令安装hexo： 1npm install -g hexo 等安装完毕，通过输入hexo的命令来测试Hexo是否安装成功,成功如下图展示: 2.初始化Hexo： 1hexo init hexo 初始化成功会显示Start blogging with Hexo! 这时在你刚才创建的Hexo里面会多出一个hexo文件 。 进入到hexo目录，右键，选择Git Bash，输入下面指令安装依赖： 1npm install 部署形成文件： 1hexo generate 运行hexo服务 1hexo server 打开浏览器，输入http://localhost:4000/便可看到默认的博客。 3.配置githubPage 登录Github，点击”New repository”，新建一个版本库。 输入仓库名：你的Github名称.github.io。然后点击Create repository。 注意：这边的创建名字，一定要用的github的用户名，不然显示不出来，因为githubPage只能你的用户名。 4.启用GitHub Page 进入项目，点击Settings，如下图： 进入设置界面，下拉找到Choose a theme，如下图： 选择一个随意模版，点击”Select theme”,发布github默认生成的一个静态站点。 试着打开自己在github的静态网址，https://y-mzh.github.io/。 5.将本地hexo项目托管到Github 打开修改hexo目录下配置文件_config.yml。 编辑最后面的deploy属性，加入代码： 123 type: gitrepository: git@github.com:Y-mzh/Y-mzh.github.io.gitbranch: master type使用是git。 repository属性改成你的刚才创建仓库git地址。 分支branch填写master。6.网站的配置文件，这里列举部分关键配置： 123456789101112131415161718# Sitetitle: Blog //网站的标题subtitle: life is struggle //副标题description: life is struggle //描述author: examble #作者信息avatar: /images/avatar.png //头像，图片位置在相应主题目录下的imageslanguage: zh-Hans //中文简体email: timezone:# Extensionstheme: next //配置主题，这里使用next主题stylus:compress: true //自适应布局# Deploymentdeploy: type: git repository: git@github.com:Y-mzh/Y-mzh.github.io.git branch: master 7.安装hexo-deployer-git插件 1npm install hexo-deployer-git --save 8.上传本地的主题到github上 123hexo cleanhexo generator //简写 hexo ghexo deploy //简写 hexo d 最后看下，部署到github上的效果！ 访问：https://y-mzh.github.io/","categories":[{"name":"Git","slug":"Git","permalink":"https://y-mzh.github.io/categories/Git/"}],"tags":[],"keywords":[{"name":"Git","slug":"Git","permalink":"https://y-mzh.github.io/categories/Git/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-02-05T13:43:52.370Z","updated":"2018-02-05T13:43:52.370Z","comments":true,"path":"hello-world/","link":"","permalink":"https://y-mzh.github.io/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}